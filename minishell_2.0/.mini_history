cat << a
cat << a
cat << a
make
clear
make
./minishell
cat << a
cat << a
cat << a
cat << a 
cat << a
cat << a
cat << a
cat << a
cat << a
cat << a
clear
cat << a << b
clear
cat << a
cat << a
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   redirection.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: marvin <marvin@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/01/27 19:08:12 by aoo               #+#    #+#             */
/*   Updated: 2025/02/24 17:39:53 by aoo              ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "minishell.h"
intre_input(char *file)
{
intfd_in;
if (file && !access(file, F_OK | R_OK))
{
fd_in = open(file, O_RDONLY);
dprintf(2, "re_input, in : %d\n", fd_in);
if (fd_in > 0)
return (fd_in);
}
write(2, "minishell: ", 12);
write(2, file, ft_strlen(file));
perror(" ");
return (-1);
}
intre_output(char *file, int append)
{
intfd_out;
if (append)
fd_out = open(file, O_WRONLY | O_CREAT | O_APPEND, 0644);
else
fd_out = open(file, O_WRONLY | O_CREAT | O_TRUNC, 0644);
printf("out : %d\n",fd_out);
if (fd_out < 0)
{
write(2, "minishell: ", 12);
write(2, file, ft_strlen(file));
perror(" ");
return (-1);
}
dup2(fd_out, STDOUT_FILENO);
close(fd_out);
return (0);
}
intre_heredoc(char *args, t_list *envp, int status)
{
char*line;
intfd_pipe[2];
char*temp;
if (pipe(fd_pipe) == -1)
return (perror("pipe error"), -1);
signal(SIGINT, handle_sigint_heredoc);
// signal(SIGQUIT, SIG_IGN);
while (1)
{
line = readline("> ");
if(g_sig_interruption)
{
close(fd_pipe[1]);
return (-1);
}
if (!line || ft_strcmp(line, args) == 0)
{
free(line); 
break ;
}
temp = handle_env(line, envp, status);
(write(fd_pipe[1], temp, ft_strlen(temp)), write(fd_pipe[1], "\n", 1));
(free(line), free(temp));
}
return (close(fd_pipe[1]), fd_pipe[0]);
}
// intredirection(char **redirect, t_list *envp, int status)
// {
// inti;
// int here_fd;
// intin_fd;
// int out_fd;
// i = 0;
// here_fd = -1;
// in_fd = -1;
// out_fd = -1;
// while (redirect[i])
// {
// if (!ft_strcmp(redirect[i], "<<") && redirect[++i])
// {
// if (here_fd > 0)
// close (here_fd);
// here_fd = re_heredoc(redirect[i], envp, status);
// }
// i++;
// }
// i = 0;
// while (redirect[i])
// {
// if (!ft_strcmp(redirect[i], "<") && redirect[++i])
// {
// if (in_fd > 0)
// close(in_fd);
// in_fd = re_input(redirect[i]);
// if (in_fd == -1)
// return (-1);
// }
// else if (!ft_strcmp(redirect[i], "<<") && redirect[++i])
// in_fd = here_fd;
// i++;
// }
// i=0;
// while (redirect[i])
// {
// if (!ft_strcmp(redirect[i], ">>") && redirect[++i])
// {
// if (re_output(redirect[i], 1) == -1)
// return (-1);
// }
// else if (!ft_strcmp(redirect[i], ">") && redirect[++i])
// {
// if (re_output(redirect[i], 0) == -1)
// return (-1);
// }
// i++;
// }
// if (in_fd > 0)
// (dup2(in_fd, STDIN_FILENO), close(in_fd));
// return (0);
// }
// Apply redirections using the prepared heredocs
int apply_redirections(t_ast *node)
{
    if (!node || !node->redirect)
        return 0;
    
    char **redirect = node->redirect;
    int i = 0;
    int in_fd = -1;
    int out_fd = -1;
    int heredoc_index = 0;
    
    // First handle input redirections
    while (redirect[i])
    {
        if (!ft_strcmp(redirect[i], "<") && redirect[i+1])
        {
            if (in_fd > 0)
                close(in_fd);
            in_fd = re_input(redirect[i+1]);
            if (in_fd == -1)
                return -1;
        }
        else if (!ft_strcmp(redirect[i], "<<") && redirect[i+1])
        {
            if (in_fd > 0)
                close(in_fd);
            // printf("in_fd %s \n", in_fd);
            // Use the already-prepared heredoc FD
            if (heredoc_index < node->heredoc_count)
{
in_fd = node->heredoc_fds[heredoc_index++];
printf("in_fd %d \n", in_fd);
        }
        i++;
    }
    
    // Then handle output redirections
    i = 0;
    while (redirect[i])
    {
        if (!ft_strcmp(redirect[i], ">") && redirect[i+1])
        {
            if (re_output(redirect[i+1], 0) == -1)
                return -1;
        }
        else if (!ft_strcmp(redirect[i], ">>") && redirect[i+1])
        {
            if (re_output(redirect[i+1], 1) == -1)
                return -1;
        }
        i++;
    }
    // Apply the input redirection if one was set
    if (in_fd > 0)
    {
        dup2(in_fd, STDIN_FILENO);
        close(in_fd);
    }
    
    return 0;
}
cat << a
clear
cat << a
cat << a
cat << a | cat << b cat << c | cat << e
cat << a 
cat << a
cat << a
cat << a << b 
clear
cat << a | cat << b > test
cat test
cat <, a 
echo $?
cat <, a
echo $?
cat <, a
echo $?
cd ..
cat < redirection.c > test
cat test
clear
cat << shit 
cat << a sdsdf sdasdfefsdf
cat << a | cat << b > test
cat test
cat << a
cat << test
cat < a
echo $?
cat <,ad
echo $?
cat << a > test | cat << b > test1
cat test test1
env
export test=ok test1= test2
export
clear
env > test
cat tet
cat test
cat < test
clear
cat > test
cat test
rm -rf test
cat << a < redirection.c > test
cat test
clear
make clean
<< a
cat << a << b
clear
cat << a << b > out
cat out
clear
nano in
c;ear
clear
cat << a << b| cat<in > out
cat out
clear
cat << a
ls
ls
clear
ls
ls
ls
ls
ls
ls
ls
echo hi
cat in 
pwd
cd built_in/
clear
ls
cat in
ls
ls
ls
cat in
ls
ls
ls
ls
ls
ls
ls
ls
ls
clear
ls
cat in
cat << a
cat << b << a
ls
/bin/ls
ls -;
ls -l
clear
echo a= $USER
echo "a"= $USER"
echo "a"= "$USER"
echo << ad > "fs" ls a"$USER" "$
echo << ad > "fs" ls a"$USER" "$"
$
"$"
<< a
sdf
<< a << b
<< a
<< a
<< a <<b
<< a <<b|
<<a <<b
<<a|
<< a
<< a |
clear
<< a|
<< a | cat in
clear
<< a |
<< a|
<< a|
<< a|
<< a|
<<bar|
<<a>
cat <<ber>>
ls|
< ls > out
ls >
ls <
ls
ls < in | grep mini
<< a| grep mini
< in | ls
ls
ls < in
ls > out
cat out
<< a |
cat<<a|ls|grep mini
clear
cat <<a|ls|grep mini
<<a|grep min
<<a
cat<<a
cat<<a
cat <<a|ls
cat <<a|
cat in > out
cat in <in
cat in|
clera
clear
cear
ckear
clear
<<a|grep mini
clear
sleep 40 
sleep 40
echo $?
cat < a | echo a
echo $?
cat < a | echo a
echo $?
clear
cat a
cat a | echo a
echo $?
cat a | echo $?
echo $?
clear
cat a | echoa 
cat a | echo a
echo $?
cat a | echo o
echo $?
cat a | ls
echo $?
sleep 40 
echo $?
cat a | echo a
echo $?
sleep 40 | echo a 
echo $?
echo ads | cat asdf
echo $?
clear
cat a | echo a
echo a | cat as
cat a | echo a
clear
cat a | echo a
cat a | echo a 
clear
cat a | echo a
echo $?
cat a | echo a
cat a | echo a 
echo a | cat a
sleep 30 | echo a 
echo a | sleep 3
echo a | sleep 3
clear
make
sleep 20 
sleep 20 | echo a 
sleep 20 | echo a
echo a | sleep 20 
echo a | sleep 20 
sleep 3 | sleep 20 
sleep 3 | echo a
sleep 20 
echo $?
sleep 20 
sleep 20 
sleep 20 | echo a 
echo $?
echo a | sleep 2
sleep 2 | echo a 
echo $?
echo a 
sleep 20 | echo a 
echo a | sleep 30 
echo a | sleep 30 
sleep 30 | echo a 
cat  a  | echo a
echo a
ls
echo a
cat a
echo a 
clear
echo a 
cat asdf
echo a
asdf
clear
sleep 40 | echo a 
cat a | sleep 30 
echo $? 
sleep 20 | cat a 
echo $? 
sleep 30 | echo a 
clear
sleep 30 | echo a 
echo $?
echo a | sleep 230
echo $?
sleep 30  | echo a 
echo $?
sleep 40 | ls
clear
sleep 40 | echo a
echo a | sleep 40 
echo $? 
sleep 40 | echo a
echo $? 
clear
sleep 40 |  echo a 
echo a | sleep 40 
echo $? 
echo a | sleep 40 
clear
echo a  | sleep 40 
echo $? 
sleep 50 | echo a 
cat ls | caste
cat 
cat | cat
cat | echo a 
echo a | sleep 40 
echo a | sleep 30 
echo a | sleep 30 
sleep 40 | echo a 
echo $ 
echo $?
sleep 40 | echo a
echo $?
echo a | sleep 40 
echo $?
echo a | sleep 40 
echo $? 
sleep 40 | echo a
echo $? 
cat a | sleep 30 
echo $? 
sleep 40 | echo a 
echo $? 
clear
sleep 40 | echo a
clear
make
cat << 40 | sleep 40 
echo $?
cat << 40 
cat 
cat a | sleep 40 
cat 
clear
env > test | cat test | grep "=" | wc -l
cat << a
cat << a | << b | cat << c
cat << a | << b | cat << c
cat << a | << b | cat < c
cat << a | << b|cat<<c
echo $?
echo $?
echo $?
cat a | sleep 40 
sleep 40 | echo a 
echo a | sleep 40 
sleep 50 | echo a 
clear
echo $? 
<< a
make
cat << a
clear
cat << a
cat << a
cat << a
cat << a
cat << a
cat << a
cat << a
sleep 30 
echo $?
sleep 40 
echo $?
sleep 40 | echo a 
echo $?
echo a | sleep 40 
echo $?
clear
cat << a
clear
cat << a 
<< a
<< a
<< a
<<
cat << a
cat << a 
cat << a 
cat | grep ok
cat | grep ok
asdfas
df
clear
<< asd 
sdf
clear
cat << a 
clear
cat <, a
cat << a 
cat << a << b << c << d 
cat << a << b << c
cat << a << b << c << d
cat << a << b
clear
make
cat << a 
clear
make
./m
cat << a
make
./m
cat << a
clear
make
./minishell
cat << a
clear
cat << a
make
cat << a
cat << a
echo $?
cat << a
cat << a << b << c << d << e
cat << a << b << c << d << e
clear
cat << a << b << c << d << e
clear
cat << a
echo $? 
echo $?
cat << a 
echo $?
echo $?
echo $?
clear
make
./m
echo $?
cat << a
echo $?
cat << a
echo $? 
clear
echo $?
clear
echo $?
cat << a
echo $?
cat << a
echo $?
∂claer
cat << a 
echo $?
cat << a 
∂
cat << a
cat << a
cat << a
cat << a
echo $?
echo $?
clear
clear
echo $?
cat << a
cat << a
cat << a | ls
clear
make
./m
clear
cat << a | ls
echo $?
clear
make
cat << a
echo $?
clear
adf
echo $?
clear
echo $?
sleep 40
echo $?
clear
cat
echo $?
cat 
echo $?
clear
asdf
